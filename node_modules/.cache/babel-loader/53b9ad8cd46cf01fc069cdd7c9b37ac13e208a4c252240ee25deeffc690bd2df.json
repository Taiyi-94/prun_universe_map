{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport './UniverseMap.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = () => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  useEffect(() => {\n    fetch('/graph_data.json').then(response => response.json()).then(data => setGraph(data));\n  }, []);\n  const findShortestPath = useCallback((system1, system2) => {\n    if (system1 === 'rect1' || system2 === 'rect1') {\n      console.error('Invalid system selection for pathfinding:', system1, system2);\n      return;\n    }\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n    try {\n      const path = find_path(graphNodes, system1, system2);\n      highlightPath(path);\n    } catch (error) {\n      console.error('Error finding path:', error);\n    }\n  }, [graph]);\n  const highlightPath = path => {\n    // Reset all system nodes color and stroke except the background rect\n    d3.selectAll('rect').each(function () {\n      if (d3.select(this).attr('id') !== 'rect1') {\n        d3.select(this).attr('fill', '#cccccc').attr('fill-opacity', 0.8).attr('stroke', '#000000').attr('stroke-width', 1);\n      }\n    });\n\n    // Reset all paths color and stroke\n    d3.selectAll('path').each(function () {\n      d3.select(this).attr('stroke', '#6e7980').attr('stroke-width', '1px');\n    });\n\n    // Highlight systems in the path\n    path.forEach(system => {\n      d3.select(`#${CSS.escape(system)}`).attr('fill', '#ff0000').attr('stroke', '#ffff00');\n    });\n\n    // Highlight paths in the path\n    for (let i = 0; i < path.length - 1; i++) {\n      const start = path[i];\n      const end = path[i + 1];\n      d3.selectAll(`path[ns2\\\\:connection-start=\"#${start}\"][ns2\\\\:connection-end=\"#${end}\"], path[ns2\\\\:connection-start=\"#${end}\"][ns2\\\\:connection-end=\"#${start}\"]`).attr('stroke', '#ff0000').attr('stroke-width', '2px');\n    }\n  };\n  useEffect(() => {\n    let svgNode;\n    let zoom;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      zoom = d3.zoom().scaleExtent([1, 20]) // Set the minimum and maximum zoom scales\n      .on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n\n      // Add mouseover and mouseout events for animation\n      g.selectAll('rect').each(function () {\n        const rect = d3.select(this);\n        const originalSize = {\n          width: +rect.attr('width'),\n          height: +rect.attr('height')\n        };\n        const originalPos = {\n          x: +rect.attr('x'),\n          y: +rect.attr('y')\n        };\n        rect.on('mouseover', function () {\n          if (rect.attr('id') === 'rect1') return;\n          rect.attr('fill-opacity', 1).attr('stroke-opacity', 1).transition().duration(200).attr('width', originalSize.width * 2).attr('height', originalSize.height * 2).attr('x', originalPos.x - originalSize.width / 2).attr('y', originalPos.y - originalSize.height / 2);\n        }).on('mouseout', function () {\n          if (rect.attr('id') === 'rect1') return;\n          rect.transition().duration(200).attr('width', originalSize.width).attr('height', originalSize.height).attr('x', originalPos.x).attr('y', originalPos.y).attr('fill-opacity', 0.8);\n        });\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function () {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          return;\n        }\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        if (container.contains(svgNode)) {\n          container.removeChild(svgNode);\n        }\n      }\n    };\n  }, [graph, findShortestPath]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 10\n  }, this);\n};\n_s(UniverseMap, \"NuTmWa0cBqqPekiNVGLU0FLVz7M=\");\n_c = UniverseMap;\nexport default UniverseMap;\nvar _c;\n$RefreshReg$(_c, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","d3","find_path","jsxDEV","_jsxDEV","UniverseMap","_s","graph","setGraph","nodes","edges","selectedSystems","setSelectedSystems","fetch","then","response","json","data","findShortestPath","system1","system2","console","error","graphNodes","forEach","edge","start","end","distance","path","highlightPath","selectAll","each","select","attr","system","CSS","escape","i","length","svgNode","zoom","xml","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","g","append","node","scaleExtent","on","event","transform","call","rect","originalSize","width","height","originalPos","x","y","transition","duration","systemId","replace","prev","newSelection","contains","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport './UniverseMap.css'; // Import the CSS file\n\nconst UniverseMap = () => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n\n  useEffect(() => {\n    fetch('/graph_data.json')\n      .then(response => response.json())\n      .then(data => setGraph(data));\n  }, []);\n\n  const findShortestPath = useCallback((system1, system2) => {\n    if (system1 === 'rect1' || system2 === 'rect1') {\n      console.error('Invalid system selection for pathfinding:', system1, system2);\n      return;\n    }\n\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n\n    try {\n      const path = find_path(graphNodes, system1, system2);\n      highlightPath(path);\n    } catch (error) {\n      console.error('Error finding path:', error);\n    }\n  }, [graph]);\n\n  const highlightPath = (path) => {\n    // Reset all system nodes color and stroke except the background rect\n    d3.selectAll('rect').each(function() {\n      if (d3.select(this).attr('id') !== 'rect1') {\n        d3.select(this)\n          .attr('fill', '#cccccc')\n          .attr('fill-opacity', 0.8)\n          .attr('stroke', '#000000')\n          .attr('stroke-width', 1);\n      }\n    });\n\n    // Reset all paths color and stroke\n    d3.selectAll('path').each(function() {\n      d3.select(this)\n        .attr('stroke', '#6e7980')\n        .attr('stroke-width', '1px');\n    });\n\n    // Highlight systems in the path\n    path.forEach(system => {\n      d3.select(`#${CSS.escape(system)}`)\n        .attr('fill', '#ff0000')\n        .attr('stroke', '#ffff00');\n    });\n\n    // Highlight paths in the path\n    for (let i = 0; i < path.length - 1; i++) {\n      const start = path[i];\n      const end = path[i + 1];\n      d3.selectAll(`path[ns2\\\\:connection-start=\"#${start}\"][ns2\\\\:connection-end=\"#${end}\"], path[ns2\\\\:connection-start=\"#${end}\"][ns2\\\\:connection-end=\"#${start}\"]`)\n        .attr('stroke', '#ff0000')\n        .attr('stroke-width', '2px');\n    }\n  };\n\n  useEffect(() => {\n    let svgNode;\n    let zoom;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      zoom = d3.zoom()\n        .scaleExtent([1, 20]) // Set the minimum and maximum zoom scales\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      // Add mouseover and mouseout events for animation\n      g.selectAll('rect').each(function() {\n        const rect = d3.select(this);\n        const originalSize = { width: +rect.attr('width'), height: +rect.attr('height') };\n        const originalPos = { x: +rect.attr('x'), y: +rect.attr('y') };\n\n        rect.on('mouseover', function() {\n          if (rect.attr('id') === 'rect1') return;\n          rect\n            .attr('fill-opacity', 1)\n            .attr('stroke-opacity', 1)\n            .transition()\n            .duration(200)\n            .attr('width', originalSize.width * 2)\n            .attr('height', originalSize.height * 2)\n            .attr('x', originalPos.x - originalSize.width / 2)\n            .attr('y', originalPos.y - originalSize.height / 2);\n        }).on('mouseout', function() {\n          if (rect.attr('id') === 'rect1') return;\n          rect.transition()\n            .duration(200)\n            .attr('width', originalSize.width)\n            .attr('height', originalSize.height)\n            .attr('x', originalPos.x)\n            .attr('y', originalPos.y)\n            .attr('fill-opacity', 0.8);\n        });\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function() {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          return;\n        }\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        if (container.contains(svgNode)) {\n          container.removeChild(svgNode);\n        }\n      }\n    };\n  }, [graph, findShortestPath]);\n\n  return <div id=\"map-container\"></div>;\n};\n\nexport default UniverseMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}