{"ast":null,"code":"import * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport { colors } from '../config/config';\nexport const findShortestPath = (graph, system1, system2, highlightPath) => {\n  if (system1 === 'rect1' || system2 === 'rect1') {\n    console.error('Invalid system selection for pathfinding:', system1, system2);\n    return;\n  }\n  const graphNodes = {};\n  graph.edges.forEach(edge => {\n    if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n    if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n    graphNodes[edge.start][edge.end] = edge.distance;\n    graphNodes[edge.end][edge.start] = edge.distance;\n  });\n  try {\n    const path = find_path(graphNodes, system1, system2);\n    highlightPath(path);\n  } catch (error) {\n    console.error('Error finding path:', error);\n  }\n};\n\n// Function to highlight the path\nexport const highlightPath = path => {\n  // Reset all system nodes color and stroke except the background rect\n  d3.selectAll('rect').each(function () {\n    if (d3.select(this).attr('id') !== 'rect1') {\n      d3.select(this).attr('fill', colors.resetSystemFill).attr('fill-opacity', colors.resetSystemFillOpacity).attr('stroke', colors.resetSystemStroke).attr('stroke-width', colors.resetSystemStrokeWidth);\n    }\n  });\n\n  // Reset all paths color and stroke\n  d3.selectAll('path').each(function () {\n    d3.select(this).attr('stroke', colors.resetPathStroke).attr('stroke-width', colors.resetPathStrokeWidth);\n  });\n\n  // Highlight systems in the path\n  path.forEach(system => {\n    d3.select(`#${CSS.escape(system)}`).attr('fill', colors.systemFill).attr('stroke', colors.systemStroke);\n  });\n\n  // Highlight paths in the path\n  for (let i = 0; i < path.length - 1; i++) {\n    const start = path[i];\n    const end = path[i + 1];\n    d3.selectAll(`path[id*=\"${start}\"][id*=\"${end}\"], path[id*=\"${end}\"][id*=\"${start}\"]`).attr('stroke', colors.pathStroke).attr('stroke-width', colors.pathStrokeWidth);\n  }\n};","map":{"version":3,"names":["d3","find_path","colors","findShortestPath","graph","system1","system2","highlightPath","console","error","graphNodes","edges","forEach","edge","start","end","distance","path","selectAll","each","select","attr","resetSystemFill","resetSystemFillOpacity","resetSystemStroke","resetSystemStrokeWidth","resetPathStroke","resetPathStrokeWidth","system","CSS","escape","systemFill","systemStroke","i","length","pathStroke","pathStrokeWidth"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/utils/graphUtils.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport { colors } from '../config/config';\n\nexport const findShortestPath = (graph, system1, system2, highlightPath) => {\n  if (system1 === 'rect1' || system2 === 'rect1') {\n    console.error('Invalid system selection for pathfinding:', system1, system2);\n    return;\n  }\n\n  const graphNodes = {};\n  graph.edges.forEach(edge => {\n    if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n    if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n    graphNodes[edge.start][edge.end] = edge.distance;\n    graphNodes[edge.end][edge.start] = edge.distance;\n  });\n\n  try {\n    const path = find_path(graphNodes, system1, system2);\n    highlightPath(path);\n  } catch (error) {\n    console.error('Error finding path:', error);\n  }\n};\n\n// Function to highlight the path\nexport const highlightPath = (path) => {\n  // Reset all system nodes color and stroke except the background rect\n  d3.selectAll('rect').each(function() {\n    if (d3.select(this).attr('id') !== 'rect1') {\n      d3.select(this)\n        .attr('fill', colors.resetSystemFill)\n        .attr('fill-opacity', colors.resetSystemFillOpacity)\n        .attr('stroke', colors.resetSystemStroke)\n        .attr('stroke-width', colors.resetSystemStrokeWidth);\n    }\n  });\n\n  // Reset all paths color and stroke\n  d3.selectAll('path').each(function() {\n    d3.select(this)\n      .attr('stroke', colors.resetPathStroke)\n      .attr('stroke-width', colors.resetPathStrokeWidth);\n  });\n\n  // Highlight systems in the path\n  path.forEach(system => {\n    d3.select(`#${CSS.escape(system)}`)\n      .attr('fill', colors.systemFill)\n      .attr('stroke', colors.systemStroke);\n  });\n\n  // Highlight paths in the path\n  for (let i = 0; i < path.length - 1; i++) {\n    const start = path[i];\n    const end = path[i + 1];\n\n    d3.selectAll(`path[id*=\"${start}\"][id*=\"${end}\"], path[id*=\"${end}\"][id*=\"${start}\"]`)\n      .attr('stroke', colors.pathStroke)\n      .attr('stroke-width', colors.pathStrokeWidth);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}