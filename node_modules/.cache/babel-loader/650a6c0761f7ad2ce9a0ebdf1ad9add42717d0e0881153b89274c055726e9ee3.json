{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const {\n    graph,\n    setSelectedSystems,\n    findShortestPath\n  } = useContext(GraphContext);\n  const {\n    isPathfindingEnabled,\n    setSelectedSystem\n  } = useContext(SelectionContext);\n  const svgRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      const zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = {\n        svg,\n        g\n      };\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  }, [graph]); // This effect only runs when the graph data changes\n\n  // Handle system click\n  const handleSystemClick = useCallback(systemId => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    if (isPathfindingEnabled) {\n      setSelectedSystems(prev => {\n        const newSelection = [...prev, systemId];\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n          return [];\n        }\n        return newSelection;\n      });\n    }\n    setSelectedSystem(systemId);\n  }, [isPathfindingEnabled, setSelectedSystems, findShortestPath, setSelectedSystem]);\n\n  // Attach click events\n  useEffect(() => {\n    if (!graphRef.current) return;\n    const {\n      g\n    } = graphRef.current;\n\n    // Remove existing click events\n    g.selectAll('rect').on('click', null);\n\n    // Add new click events\n    g.selectAll('rect').on('click', function () {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]); // This effect runs when handleSystemClick changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n}, \"dPK0uZS+7s4MZkQDwgFjHGP8FUU=\")), \"dPK0uZS+7s4MZkQDwgFjHGP8FUU=\");\n_c2 = UniverseMap;\nexport default UniverseMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"UniverseMap$React.memo\");\n$RefreshReg$(_c2, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useContext","useRef","useCallback","d3","GraphContext","SelectionContext","addMouseEvents","jsxDEV","_jsxDEV","UniverseMap","_s","memo","_c","graph","setSelectedSystems","findShortestPath","isPathfindingEnabled","setSelectedSystem","svgRef","graphRef","edges","xml","then","data","svgNode","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","select","g","append","node","zoom","scaleExtent","on","event","attr","transform","call","current","contains","handleSystemClick","systemId","prev","newSelection","length","selectAll","replace","id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\n\nconst UniverseMap = React.memo(() => {\n  const { graph, setSelectedSystems, findShortestPath } = useContext(GraphContext);\n  const { isPathfindingEnabled, setSelectedSystem } = useContext(SelectionContext);\n  const svgRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      const zoom = d3.zoom()\n        .scaleExtent([1, 20])\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = { svg, g };\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  }, [graph]); // This effect only runs when the graph data changes\n\n  // Handle system click\n  const handleSystemClick = useCallback((systemId) => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    if (isPathfindingEnabled) {\n      setSelectedSystems(prev => {\n        const newSelection = [...prev, systemId];\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n          return [];\n        }\n        return newSelection;\n      });\n    }\n    setSelectedSystem(systemId);\n  }, [isPathfindingEnabled, setSelectedSystems, findShortestPath, setSelectedSystem]);\n\n  // Attach click events\n  useEffect(() => {\n    if (!graphRef.current) return;\n\n    const { g } = graphRef.current;\n\n    // Remove existing click events\n    g.selectAll('rect').on('click', null);\n\n    // Add new click events\n    g.selectAll('rect').on('click', function() {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]); // This effect runs when handleSystemClick changes\n\n  return <div id=\"map-container\"></div>;\n});\n\nexport default UniverseMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}