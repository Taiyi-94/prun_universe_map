{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback } from 'react';\nimport { highlightSelectedSystem, highlightPath } from '../utils/graphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SelectionContext = /*#__PURE__*/createContext();\nexport const SelectionProvider = ({\n  children\n}) => {\n  _s();\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => !prev);\n    setPathfindingSelection([]); // Clear pathfinding selection when toggling\n  }, []);\n  const updateHighlighting = useCallback((prevSelected, nextSelected, pathSelection) => {\n    highlightSelectedSystem(prevSelected, nextSelected, pathSelection);\n    if (pathSelection.length === 2) {\n      highlightPath(pathSelection);\n    }\n  }, []);\n  const setAndHighlightSelectedSystem = useCallback(nextSelectedSystem => {\n    setSelectedSystem(prevSelectedSystem => {\n      updateHighlighting(prevSelectedSystem, nextSelectedSystem, pathfindingSelection);\n      return nextSelectedSystem;\n    });\n  }, [pathfindingSelection, updateHighlighting]);\n  const updatePathfindingSelection = useCallback(systemId => {\n    setPathfindingSelection(prev => {\n      const newSelection = [...prev, systemId].slice(-2); // Keep only the last two selections\n      updateHighlighting(selectedSystem, selectedSystem, newSelection);\n      return newSelection;\n    });\n  }, [selectedSystem, updateHighlighting]);\n  return /*#__PURE__*/_jsxDEV(SelectionContext.Provider, {\n    value: {\n      isPathfindingEnabled,\n      togglePathfinding,\n      selectedSystem,\n      setSelectedSystem: setAndHighlightSelectedSystem,\n      pathfindingSelection,\n      updatePathfindingSelection\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectionProvider, \"r0o58PQW4SuP7TpUNoXrC49FnBo=\");\n_c = SelectionProvider;\nvar _c;\n$RefreshReg$(_c, \"SelectionProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","highlightSelectedSystem","highlightPath","jsxDEV","_jsxDEV","SelectionContext","SelectionProvider","children","_s","isPathfindingEnabled","setIsPathfindingEnabled","selectedSystem","setSelectedSystem","pathfindingSelection","setPathfindingSelection","togglePathfinding","prev","updateHighlighting","prevSelected","nextSelected","pathSelection","length","setAndHighlightSelectedSystem","nextSelectedSystem","prevSelectedSystem","updatePathfindingSelection","systemId","newSelection","slice","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js"],"sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\nimport { highlightSelectedSystem, highlightPath } from '../utils/graphUtils';\n\nexport const SelectionContext = createContext();\n\nexport const SelectionProvider = ({ children }) => {\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => !prev);\n    setPathfindingSelection([]);  // Clear pathfinding selection when toggling\n  }, []);\n\n  const updateHighlighting = useCallback((prevSelected, nextSelected, pathSelection) => {\n    highlightSelectedSystem(prevSelected, nextSelected, pathSelection);\n    if (pathSelection.length === 2) {\n      highlightPath(pathSelection);\n    }\n  }, []);\n\n  const setAndHighlightSelectedSystem = useCallback((nextSelectedSystem) => {\n    setSelectedSystem(prevSelectedSystem => {\n      updateHighlighting(prevSelectedSystem, nextSelectedSystem, pathfindingSelection);\n      return nextSelectedSystem;\n    });\n  }, [pathfindingSelection, updateHighlighting]);\n\n  const updatePathfindingSelection = useCallback((systemId) => {\n    setPathfindingSelection(prev => {\n      const newSelection = [...prev, systemId].slice(-2);  // Keep only the last two selections\n      updateHighlighting(selectedSystem, selectedSystem, newSelection);\n      return newSelection;\n    });\n  }, [selectedSystem, updateHighlighting]);\n\n  return (\n    <SelectionContext.Provider\n      value={{\n        isPathfindingEnabled,\n        togglePathfinding,\n        selectedSystem,\n        setSelectedSystem: setAndHighlightSelectedSystem,\n        pathfindingSelection,\n        updatePathfindingSelection\n      }}\n    >\n      {children}\n    </SelectionContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACnE,SAASC,uBAAuB,EAAEC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,OAAO,MAAMC,gBAAgB,gBAAGP,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMQ,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpE,MAAMgB,iBAAiB,GAAGf,WAAW,CAAC,MAAM;IAC1CU,uBAAuB,CAACM,IAAI,IAAI,CAACA,IAAI,CAAC;IACtCF,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAE;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,kBAAkB,GAAGjB,WAAW,CAAC,CAACkB,YAAY,EAAEC,YAAY,EAAEC,aAAa,KAAK;IACpFnB,uBAAuB,CAACiB,YAAY,EAAEC,YAAY,EAAEC,aAAa,CAAC;IAClE,IAAIA,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9BnB,aAAa,CAACkB,aAAa,CAAC;IAC9B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,6BAA6B,GAAGtB,WAAW,CAAEuB,kBAAkB,IAAK;IACxEX,iBAAiB,CAACY,kBAAkB,IAAI;MACtCP,kBAAkB,CAACO,kBAAkB,EAAED,kBAAkB,EAAEV,oBAAoB,CAAC;MAChF,OAAOU,kBAAkB;IAC3B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,oBAAoB,EAAEI,kBAAkB,CAAC,CAAC;EAE9C,MAAMQ,0BAA0B,GAAGzB,WAAW,CAAE0B,QAAQ,IAAK;IAC3DZ,uBAAuB,CAACE,IAAI,IAAI;MAC9B,MAAMW,YAAY,GAAG,CAAC,GAAGX,IAAI,EAAEU,QAAQ,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;MACrDX,kBAAkB,CAACN,cAAc,EAAEA,cAAc,EAAEgB,YAAY,CAAC;MAChE,OAAOA,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAChB,cAAc,EAAEM,kBAAkB,CAAC,CAAC;EAExC,oBACEb,OAAA,CAACC,gBAAgB,CAACwB,QAAQ;IACxBC,KAAK,EAAE;MACLrB,oBAAoB;MACpBM,iBAAiB;MACjBJ,cAAc;MACdC,iBAAiB,EAAEU,6BAA6B;MAChDT,oBAAoB;MACpBY;IACF,CAAE;IAAAlB,QAAA,EAEDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC1B,EAAA,CA9CWF,iBAAiB;AAAA6B,EAAA,GAAjB7B,iBAAiB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}