{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const {\n    highlightSelectedSystem,\n    graph,\n    findShortestPath,\n    setSelectedSystems,\n    setSelectedSystem,\n    isPathfindingEnabled\n  } = useContext(GraphContext);\n  const svgRef = useRef(null);\n  console.log('UniverseMap render, isPathfindingEnabled:', isPathfindingEnabled);\n  const handleSystemClick = useCallback(systemId => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    if (isPathfindingEnabled) {\n      setSelectedSystems(prev => {\n        const newSelection = [...prev, systemId];\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n          return [];\n        }\n        return newSelection;\n      });\n    }\n    highlightSelectedSystem(systemId);\n    setSelectedSystem(systemId);\n  }, [isPathfindingEnabled, setSelectedSystems, findShortestPath, highlightSelectedSystem, setSelectedSystem]);\n  useEffect(() => {\n    console.log('UniverseMap useEffect running, graph:', graph);\n    if (!graph || !graph.edges) return;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      console.log('SVG loaded');\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      const zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      addMouseEvents(g);\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function () {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        handleSystemClick(systemId);\n      });\n      svgRef.current = svgNode;\n    });\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  }, [graph, handleSystemClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n}, \"wzeuUcltWYjvuWaMIEikBh4oxqM=\")), \"wzeuUcltWYjvuWaMIEikBh4oxqM=\");\n_c2 = UniverseMap;\nexport default UniverseMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"UniverseMap$React.memo\");\n$RefreshReg$(_c2, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useContext","useRef","useCallback","d3","GraphContext","addMouseEvents","jsxDEV","_jsxDEV","UniverseMap","_s","memo","_c","highlightSelectedSystem","graph","findShortestPath","setSelectedSystems","setSelectedSystem","isPathfindingEnabled","svgRef","console","log","handleSystemClick","systemId","prev","newSelection","length","edges","xml","then","data","svgNode","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","select","g","append","node","zoom","scaleExtent","on","event","attr","transform","call","selectAll","replace","current","contains","id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\n\nconst UniverseMap = React.memo(() => {\n  const { highlightSelectedSystem, graph, findShortestPath, setSelectedSystems, setSelectedSystem, isPathfindingEnabled } = useContext(GraphContext);\n  const svgRef = useRef(null);\n\n  console.log('UniverseMap render, isPathfindingEnabled:', isPathfindingEnabled);\n\n  const handleSystemClick = useCallback((systemId) => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    if (isPathfindingEnabled) {\n      setSelectedSystems(prev => {\n        const newSelection = [...prev, systemId];\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n          return [];\n        }\n        return newSelection;\n      });\n    }\n    highlightSelectedSystem(systemId);\n    setSelectedSystem(systemId);\n  }, [isPathfindingEnabled, setSelectedSystems, findShortestPath, highlightSelectedSystem, setSelectedSystem]);\n\n  useEffect(() => {\n    console.log('UniverseMap useEffect running, graph:', graph);\n    if (!graph || !graph.edges) return;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      console.log('SVG loaded');\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      const zoom = d3.zoom()\n        .scaleExtent([1, 20])\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      addMouseEvents(g);\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function() {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        handleSystemClick(systemId);\n      });\n\n      svgRef.current = svgNode;\n    });\n\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  }, [graph, handleSystemClick]);\n\n  return <div id=\"map-container\"></div>;\n});\n\nexport default UniverseMap;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACzE,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,gBAAAC,EAAA,eAAGX,KAAK,CAACY,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAM;EAAAA,EAAA;EACnC,MAAM;IAAEG,uBAAuB;IAAEC,KAAK;IAAEC,gBAAgB;IAAEC,kBAAkB;IAAEC,iBAAiB;IAAEC;EAAqB,CAAC,GAAGjB,UAAU,CAACI,YAAY,CAAC;EAClJ,MAAMc,MAAM,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAE3BkB,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEH,oBAAoB,CAAC;EAE9E,MAAMI,iBAAiB,GAAGnB,WAAW,CAAEoB,QAAQ,IAAK;IAClD,IAAIA,QAAQ,KAAK,OAAO,EAAE;MACxB;IACF;IACA,IAAIL,oBAAoB,EAAE;MACxBF,kBAAkB,CAACQ,IAAI,IAAI;QACzB,MAAMC,YAAY,GAAG,CAAC,GAAGD,IAAI,EAAED,QAAQ,CAAC;QACxC,IAAIE,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;UAC7BX,gBAAgB,CAACU,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;UAClD,OAAO,EAAE;QACX;QACA,OAAOA,YAAY;MACrB,CAAC,CAAC;IACJ;IACAZ,uBAAuB,CAACU,QAAQ,CAAC;IACjCN,iBAAiB,CAACM,QAAQ,CAAC;EAC7B,CAAC,EAAE,CAACL,oBAAoB,EAAEF,kBAAkB,EAAED,gBAAgB,EAAEF,uBAAuB,EAAEI,iBAAiB,CAAC,CAAC;EAE5GjB,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEP,KAAK,CAAC;IAC3D,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACa,KAAK,EAAE;IAE5BvB,EAAE,CAACwB,GAAG,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAI;MACvDV,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB,MAAMU,OAAO,GAAGD,IAAI,CAACE,eAAe;MACpC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;;MAE1D;MACA,OAAOF,SAAS,CAACG,UAAU,EAAE;QAC3BH,SAAS,CAACI,WAAW,CAACJ,SAAS,CAACG,UAAU,CAAC;MAC7C;;MAEA;MACAH,SAAS,CAACK,WAAW,CAACP,OAAO,CAAC;;MAE9B;MACA,MAAMQ,GAAG,GAAGnC,EAAE,CAACoC,MAAM,CAACT,OAAO,CAAC;MAC9B,MAAMU,CAAC,GAAGF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC;;MAEzB;MACA,OAAOX,OAAO,CAACK,UAAU,IAAIL,OAAO,CAACK,UAAU,KAAKK,CAAC,CAACE,IAAI,CAAC,CAAC,EAAE;QAC5DF,CAAC,CAACE,IAAI,CAAC,CAAC,CAACL,WAAW,CAACP,OAAO,CAACK,UAAU,CAAC;MAC1C;MAEA,MAAMQ,IAAI,GAAGxC,EAAE,CAACwC,IAAI,CAAC,CAAC,CACnBC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACpBC,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;QACrBN,CAAC,CAACO,IAAI,CAAC,WAAW,EAAED,KAAK,CAACE,SAAS,CAAC;MACtC,CAAC,CAAC;MAEJV,GAAG,CAACW,IAAI,CAACN,IAAI,CAAC;MAEdtC,cAAc,CAACmC,CAAC,CAAC;;MAEjB;MACAA,CAAC,CAACU,SAAS,CAAC,MAAM,CAAC,CAACL,EAAE,CAAC,OAAO,EAAE,YAAW;QACzC,MAAMvB,QAAQ,GAAGnB,EAAE,CAACoC,MAAM,CAAC,IAAI,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAACI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;QAC5D9B,iBAAiB,CAACC,QAAQ,CAAC;MAC7B,CAAC,CAAC;MAEFJ,MAAM,CAACkC,OAAO,GAAGtB,OAAO;IAC1B,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIZ,MAAM,CAACkC,OAAO,EAAE;QAClB,MAAMpB,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;QAC1D,IAAIF,SAAS,IAAIA,SAAS,CAACqB,QAAQ,CAACnC,MAAM,CAACkC,OAAO,CAAC,EAAE;UACnDpB,SAAS,CAACI,WAAW,CAAClB,MAAM,CAACkC,OAAO,CAAC;QACvC;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACvC,KAAK,EAAEQ,iBAAiB,CAAC,CAAC;EAE9B,oBAAOd,OAAA;IAAK+C,EAAE,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACvC,CAAC,kCAAC;AAACC,GAAA,GAhFGnD,WAAW;AAkFjB,eAAeA,WAAW;AAAC,IAAAG,EAAA,EAAAgD,GAAA;AAAAC,YAAA,CAAAjD,EAAA;AAAAiD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}