{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const {\n    graph,\n    setSelectedSystems,\n    findShortestPath\n  } = useContext(GraphContext);\n  const {\n    highlightSelectedSystem,\n    pathfindingSelection,\n    isPathfindingEnabled,\n    setSelectedSystem\n  } = useContext(SelectionContext);\n  const svgRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle system click\n  const handleSystemClick = useCallback(systemId => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    highlightSelectedSystem(systemId);\n    if (isPathfindingEnabled && pathfindingSelection.length === 2) {\n      findShortestPath(pathfindingSelection[0], pathfindingSelection[1]);\n    }\n  }, [isPathfindingEnabled, pathfindingSelection, highlightSelectedSystem, findShortestPath]);\n\n  // Attach click events\n  const attachClickEvents = useCallback(g => {\n    g.selectAll('rect').on('click', function () {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      const zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = {\n        svg,\n        g\n      };\n\n      // Attach click events here, after the SVG is fully initialized\n      attachClickEvents(g);\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n    // eslint-disable-next-line\n  }, [graph]);\n\n  // Update click events when handleSystemClick changes\n  useEffect(() => {\n    if (graphRef.current) {\n      attachClickEvents(graphRef.current.g);\n    }\n  }, [attachClickEvents]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n}, \"DJY0rmgRFTm2t1bxedC0r47Gmts=\")), \"DJY0rmgRFTm2t1bxedC0r47Gmts=\");\n_c2 = UniverseMap;\nexport default UniverseMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"UniverseMap$React.memo\");\n$RefreshReg$(_c2, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useContext","useRef","useCallback","d3","GraphContext","SelectionContext","addMouseEvents","jsxDEV","_jsxDEV","UniverseMap","_s","memo","_c","graph","setSelectedSystems","findShortestPath","highlightSelectedSystem","pathfindingSelection","isPathfindingEnabled","setSelectedSystem","svgRef","graphRef","handleSystemClick","systemId","length","attachClickEvents","g","selectAll","on","select","attr","replace","edges","xml","then","data","svgNode","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","append","node","zoom","scaleExtent","event","transform","call","current","contains","id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\n\nconst UniverseMap = React.memo(() => {\n  const { graph, setSelectedSystems, findShortestPath } = useContext(GraphContext);\n  const { highlightSelectedSystem, pathfindingSelection, isPathfindingEnabled, setSelectedSystem } = useContext(SelectionContext);\n  const svgRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle system click\n  const handleSystemClick = useCallback((systemId) => {\n  if (systemId === 'rect1') {\n    return;\n  }\n  highlightSelectedSystem(systemId);\n  if (isPathfindingEnabled && pathfindingSelection.length === 2) {\n    findShortestPath(pathfindingSelection[0], pathfindingSelection[1]);\n  }\n}, [isPathfindingEnabled, pathfindingSelection, highlightSelectedSystem, findShortestPath]);\n\n  // Attach click events\n  const attachClickEvents = useCallback((g) => {\n    g.selectAll('rect').on('click', function() {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      const zoom = d3.zoom()\n        .scaleExtent([1, 20])\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = { svg, g };\n\n      // Attach click events here, after the SVG is fully initialized\n      attachClickEvents(g);\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  // eslint-disable-next-line\n  }, [graph]);\n\n  // Update click events when handleSystemClick changes\n  useEffect(() => {\n    if (graphRef.current) {\n      attachClickEvents(graphRef.current.g);\n    }\n  }, [attachClickEvents]);\n\n  return <div id=\"map-container\"></div>;\n});\n\nexport default UniverseMap;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACzE,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,gBAAAC,EAAA,eAAGZ,KAAK,CAACa,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAM;EAAAA,EAAA;EACnC,MAAM;IAAEG,KAAK;IAAEC,kBAAkB;IAAEC;EAAiB,CAAC,GAAGf,UAAU,CAACI,YAAY,CAAC;EAChF,MAAM;IAAEY,uBAAuB;IAAEC,oBAAoB;IAAEC,oBAAoB;IAAEC;EAAkB,CAAC,GAAGnB,UAAU,CAACK,gBAAgB,CAAC;EAC/H,MAAMe,MAAM,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMoB,QAAQ,GAAGpB,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMqB,iBAAiB,GAAGpB,WAAW,CAAEqB,QAAQ,IAAK;IACpD,IAAIA,QAAQ,KAAK,OAAO,EAAE;MACxB;IACF;IACAP,uBAAuB,CAACO,QAAQ,CAAC;IACjC,IAAIL,oBAAoB,IAAID,oBAAoB,CAACO,MAAM,KAAK,CAAC,EAAE;MAC7DT,gBAAgB,CAACE,oBAAoB,CAAC,CAAC,CAAC,EAAEA,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACpE;EACF,CAAC,EAAE,CAACC,oBAAoB,EAAED,oBAAoB,EAAED,uBAAuB,EAAED,gBAAgB,CAAC,CAAC;;EAEzF;EACA,MAAMU,iBAAiB,GAAGvB,WAAW,CAAEwB,CAAC,IAAK;IAC3CA,CAAC,CAACC,SAAS,CAAC,MAAM,CAAC,CAACC,EAAE,CAAC,OAAO,EAAE,YAAW;MACzC,MAAML,QAAQ,GAAGpB,EAAE,CAAC0B,MAAM,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MAC5DT,iBAAiB,CAACC,QAAQ,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,iBAAiB,CAAC,CAAC;;EAEvB;EACAvB,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,KAAK,IAAI,CAACA,KAAK,CAACmB,KAAK,EAAE;IAE5B7B,EAAE,CAAC8B,GAAG,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAI;MACvD,MAAMC,OAAO,GAAGD,IAAI,CAACE,eAAe;MACpC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;;MAE1D;MACA,OAAOF,SAAS,CAACG,UAAU,EAAE;QAC3BH,SAAS,CAACI,WAAW,CAACJ,SAAS,CAACG,UAAU,CAAC;MAC7C;;MAEA;MACAH,SAAS,CAACK,WAAW,CAACP,OAAO,CAAC;;MAE9B;MACA,MAAMQ,GAAG,GAAGzC,EAAE,CAAC0B,MAAM,CAACO,OAAO,CAAC;MAC9B,MAAMV,CAAC,GAAGkB,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC;;MAEzB;MACA,OAAOT,OAAO,CAACK,UAAU,IAAIL,OAAO,CAACK,UAAU,KAAKf,CAAC,CAACoB,IAAI,CAAC,CAAC,EAAE;QAC5DpB,CAAC,CAACoB,IAAI,CAAC,CAAC,CAACH,WAAW,CAACP,OAAO,CAACK,UAAU,CAAC;MAC1C;MAEA,MAAMM,IAAI,GAAG5C,EAAE,CAAC4C,IAAI,CAAC,CAAC,CACnBC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACpBpB,EAAE,CAAC,MAAM,EAAGqB,KAAK,IAAK;QACrBvB,CAAC,CAACI,IAAI,CAAC,WAAW,EAAEmB,KAAK,CAACC,SAAS,CAAC;MACtC,CAAC,CAAC;MAEJN,GAAG,CAACO,IAAI,CAACJ,IAAI,CAAC;MAEdzC,cAAc,CAACoB,CAAC,CAAC;;MAEjB;MACAN,MAAM,CAACgC,OAAO,GAAGhB,OAAO;MACxBf,QAAQ,CAAC+B,OAAO,GAAG;QAAER,GAAG;QAAElB;MAAE,CAAC;;MAE7B;MACAD,iBAAiB,CAACC,CAAC,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIN,MAAM,CAACgC,OAAO,EAAE;QAClB,MAAMd,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;QAC1D,IAAIF,SAAS,IAAIA,SAAS,CAACe,QAAQ,CAACjC,MAAM,CAACgC,OAAO,CAAC,EAAE;UACnDd,SAAS,CAACI,WAAW,CAACtB,MAAM,CAACgC,OAAO,CAAC;QACvC;MACF;IACF,CAAC;IACH;EACA,CAAC,EAAE,CAACvC,KAAK,CAAC,CAAC;;EAEX;EACAd,SAAS,CAAC,MAAM;IACd,IAAIsB,QAAQ,CAAC+B,OAAO,EAAE;MACpB3B,iBAAiB,CAACJ,QAAQ,CAAC+B,OAAO,CAAC1B,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,CAACD,iBAAiB,CAAC,CAAC;EAEvB,oBAAOjB,OAAA;IAAK8C,EAAE,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACvC,CAAC,kCAAC;AAACC,GAAA,GAxFGlD,WAAW;AA0FjB,eAAeA,WAAW;AAAC,IAAAG,EAAA,EAAA+C,GAAA;AAAAC,YAAA,CAAAhD,EAAA;AAAAgD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}