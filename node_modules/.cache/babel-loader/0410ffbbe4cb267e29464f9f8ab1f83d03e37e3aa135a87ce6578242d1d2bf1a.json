{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath, highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GraphContext = /*#__PURE__*/createContext();\nexport const GraphProvider = ({\n  children\n}) => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [materials, setMaterials] = useState({});\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planetData, setPlanetData] = useState({});\n  const [universeData, setUniverseData] = useState({});\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  console.log('GraphProvider render');\n  useEffect(() => {\n    console.log('GraphProvider useEffect running');\n    console.log('Fetching graph data');\n    fetch('/graph_data.json').then(response => response.json()).then(data => {\n      setGraph(data);\n    }).catch(error => {\n      console.error('Error fetching graph data:', error);\n    });\n    fetch('/material_data.json').then(response => response.json()).then(data => {\n      setMaterials(data);\n    }).catch(error => {\n      console.error('Error fetching material data:', error);\n    });\n    fetch('/prun_universe_data.json').then(response => response.json()).then(data => {\n      // Group planets by SystemId\n      const groupedUniverseData = data.reduce((acc, system) => {\n        if (!acc[system.SystemId]) {\n          acc[system.SystemId] = [];\n        }\n        acc[system.SystemId].push(system);\n        return acc;\n      }, {});\n      setUniverseData(groupedUniverseData);\n    }).catch(error => {\n      console.error('Error fetching universe data:', error);\n    });\n\n    // Fetch planet data\n    fetch('/planet_data.json').then(response => response.json()).then(data => {\n      // Group planets by SystemId\n      const groupedPlanetData = data.reduce((acc, planet) => {\n        if (!acc[planet.SystemId]) {\n          acc[planet.SystemId] = [];\n        }\n        acc[planet.SystemId].push(planet);\n        return acc;\n      }, {});\n      setPlanetData(groupedPlanetData);\n    }).catch(error => {\n      console.error('Error fetching planet data:', error);\n    });\n  }, []);\n  const togglePathfinding = useCallback(() => {\n    console.log('togglePathfinding called');\n    setIsPathfindingEnabled(prev => {\n      console.log('New isPathfindingEnabled value:', !prev);\n      return !prev;\n    });\n  }, []);\n  const findShortestPath = useCallback((system1, system2) => {\n    findShortestPathUtil(graph, system1, system2, highlightPath);\n  }, [graph]);\n  const highlightSelectedSystem = useCallback(systemId => {\n    highlightSelectedSystemUtil(selectedSystem, systemId);\n  }, [selectedSystem]);\n  const contextValue = useMemo(() => ({\n    graph,\n    setGraph,\n    materials,\n    setMaterials,\n    selectedSystems,\n    setSelectedSystems,\n    findShortestPath,\n    selectedSystem,\n    setSelectedSystem,\n    planetData,\n    universeData,\n    isPathfindingEnabled,\n    togglePathfinding,\n    highlightSelectedSystem\n  }), [graph, materials, selectedSystems, selectedSystem, planetData, universeData, isPathfindingEnabled, findShortestPath, togglePathfinding, highlightSelectedSystem]);\n  return /*#__PURE__*/_jsxDEV(GraphContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphProvider, \"ts8yau1jIMUx1onwWgCTI3/B9Ds=\");\n_c = GraphProvider;\nvar _c;\n$RefreshReg$(_c, \"GraphProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useMemo","findShortestPath","findShortestPathUtil","highlightPath","highlightSelectedSystem","highlightSelectedSystemUtil","jsxDEV","_jsxDEV","GraphContext","GraphProvider","children","_s","graph","setGraph","nodes","edges","materials","setMaterials","selectedSystems","setSelectedSystems","selectedSystem","setSelectedSystem","planetData","setPlanetData","universeData","setUniverseData","isPathfindingEnabled","setIsPathfindingEnabled","console","log","fetch","then","response","json","data","catch","error","groupedUniverseData","reduce","acc","system","SystemId","push","groupedPlanetData","planet","togglePathfinding","prev","system1","system2","systemId","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath, highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\n\nexport const GraphContext = createContext();\n\nexport const GraphProvider = ({ children }) => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [materials, setMaterials] = useState({});\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planetData, setPlanetData] = useState({});\n  const [universeData, setUniverseData] = useState({});\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n\n  console.log('GraphProvider render');\n\n  useEffect(() => {\n    console.log('GraphProvider useEffect running');\n    console.log('Fetching graph data');\n    fetch('/graph_data.json')\n      .then(response => response.json())\n      .then(data => {\n        setGraph(data);\n      })\n      .catch(error => {\n        console.error('Error fetching graph data:', error);\n      });\n\n    fetch('/material_data.json')\n      .then(response => response.json())\n      .then(data => {\n        setMaterials(data);\n      })\n      .catch(error => {\n        console.error('Error fetching material data:', error);\n      });\n\n    fetch('/prun_universe_data.json')\n      .then(response => response.json())\n      .then(data => {\n        // Group planets by SystemId\n        const groupedUniverseData = data.reduce((acc, system) => {\n          if (!acc[system.SystemId]) {\n            acc[system.SystemId] = [];\n          }\n          acc[system.SystemId].push(system);\n          return acc;\n        }, {});\n        setUniverseData(groupedUniverseData);\n      })\n      .catch(error => {\n        console.error('Error fetching universe data:', error);\n      });\n\n    // Fetch planet data\n    fetch('/planet_data.json')\n      .then(response => response.json())\n      .then(data => {\n        // Group planets by SystemId\n        const groupedPlanetData = data.reduce((acc, planet) => {\n          if (!acc[planet.SystemId]) {\n            acc[planet.SystemId] = [];\n          }\n          acc[planet.SystemId].push(planet);\n          return acc;\n        }, {});\n        setPlanetData(groupedPlanetData);\n      })\n      .catch(error => {\n        console.error('Error fetching planet data:', error);\n      });\n  }, []);\n\n  const togglePathfinding = useCallback(() => {\n    console.log('togglePathfinding called');\n    setIsPathfindingEnabled(prev => {\n      console.log('New isPathfindingEnabled value:', !prev);\n      return !prev;\n    });\n  }, []);\n\n  const findShortestPath = useCallback((system1, system2) => {\n    findShortestPathUtil(graph, system1, system2, highlightPath);\n  }, [graph]);\n\n  const highlightSelectedSystem = useCallback((systemId) => {\n    highlightSelectedSystemUtil(selectedSystem, systemId);\n  }, [selectedSystem]);\n\n  const contextValue = useMemo(() => ({\n    graph,\n    setGraph,\n    materials,\n    setMaterials,\n    selectedSystems,\n    setSelectedSystems,\n    findShortestPath,\n    selectedSystem,\n    setSelectedSystem,\n    planetData,\n    universeData,\n    isPathfindingEnabled,\n    togglePathfinding,\n    highlightSelectedSystem,\n  }), [\n    graph,\n    materials,\n    selectedSystems,\n    selectedSystem,\n    planetData,\n    universeData,\n    isPathfindingEnabled,\n    findShortestPath,\n    togglePathfinding,\n    highlightSelectedSystem\n  ]);\n\n  return (\n    <GraphContext.Provider value={contextValue}>\n      {children}\n    </GraphContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}