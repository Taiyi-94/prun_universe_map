{"ast":null,"code":"import * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nexport const findShortestPath = (graph, system1, system2, highlightPath) => {\n  const graphNodes = {};\n  graph.edges.forEach(edge => {\n    if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n    if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n    graphNodes[edge.start][edge.end] = edge.distance;\n    graphNodes[edge.end][edge.start] = edge.distance;\n  });\n  try {\n    const path = find_path(graphNodes, system1, system2);\n    highlightPath(path);\n  } catch (error) {\n    console.error('Error finding path:', error);\n  }\n};\nexport const highlightPath = path => {\n  d3.selectAll('rect, path').each(function () {\n    const element = d3.select(this);\n    const id = element.attr('id');\n    if (path.includes(id)) {\n      element.attr('fill', '#ff0000').attr('stroke', '#ffff00');\n    } else if (id !== 'rect1') {\n      element.attr('fill', '#cccccc').attr('fill-opacity', 0.8).attr('stroke', '#000000').attr('stroke-width', 1);\n    }\n  });\n};","map":{"version":3,"names":["d3","find_path","findShortestPath","graph","system1","system2","highlightPath","graphNodes","edges","forEach","edge","start","end","distance","path","error","console","selectAll","each","element","select","id","attr","includes"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/utils/graphUtils.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\n\nexport const findShortestPath = (graph, system1, system2, highlightPath) => {\n  const graphNodes = {};\n  graph.edges.forEach(edge => {\n    if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n    if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n    graphNodes[edge.start][edge.end] = edge.distance;\n    graphNodes[edge.end][edge.start] = edge.distance;\n  });\n\n  try {\n    const path = find_path(graphNodes, system1, system2);\n    highlightPath(path);\n  } catch (error) {\n    console.error('Error finding path:', error);\n  }\n};\n\nexport const highlightPath = (path) => {\n  d3.selectAll('rect, path').each(function() {\n    const element = d3.select(this);\n    const id = element.attr('id');\n    if (path.includes(id)) {\n      element\n        .attr('fill', '#ff0000')\n        .attr('stroke', '#ffff00');\n    } else if (id !== 'rect1') {\n      element\n        .attr('fill', '#cccccc')\n        .attr('fill-opacity', 0.8)\n        .attr('stroke', '#000000')\n        .attr('stroke-width', 1);\n    }\n  });\n};\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,QAAQ,YAAY;AAEtC,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,aAAa,KAAK;EAC1E,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrBJ,KAAK,CAACK,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;IAC1B,IAAI,CAACH,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,EAAEJ,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxD,IAAI,CAACJ,UAAU,CAACG,IAAI,CAACE,GAAG,CAAC,EAAEL,UAAU,CAACG,IAAI,CAACE,GAAG,CAAC,GAAG,CAAC,CAAC;IACpDL,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,CAACD,IAAI,CAACE,GAAG,CAAC,GAAGF,IAAI,CAACG,QAAQ;IAChDN,UAAU,CAACG,IAAI,CAACE,GAAG,CAAC,CAACF,IAAI,CAACC,KAAK,CAAC,GAAGD,IAAI,CAACG,QAAQ;EAClD,CAAC,CAAC;EAEF,IAAI;IACF,MAAMC,IAAI,GAAGb,SAAS,CAACM,UAAU,EAAEH,OAAO,EAAEC,OAAO,CAAC;IACpDC,aAAa,CAACQ,IAAI,CAAC;EACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C;AACF,CAAC;AAED,OAAO,MAAMT,aAAa,GAAIQ,IAAI,IAAK;EACrCd,EAAE,CAACiB,SAAS,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,YAAW;IACzC,MAAMC,OAAO,GAAGnB,EAAE,CAACoB,MAAM,CAAC,IAAI,CAAC;IAC/B,MAAMC,EAAE,GAAGF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;IAC7B,IAAIR,IAAI,CAACS,QAAQ,CAACF,EAAE,CAAC,EAAE;MACrBF,OAAO,CACJG,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CACvBA,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC;IAC9B,CAAC,MAAM,IAAID,EAAE,KAAK,OAAO,EAAE;MACzBF,OAAO,CACJG,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IAC5B;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}