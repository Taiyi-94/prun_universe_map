{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = () => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  useEffect(() => {\n    fetch('/graph_data.json').then(response => response.json()).then(data => setGraph(data));\n  }, []);\n  useEffect(() => {\n    let svgNode;\n    d3.xml('/PrUn_universe_map.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n      container.appendChild(svgNode);\n\n      // Debug: Print all rect elements and their IDs\n      d3.select(svgNode).selectAll('rect').each(function () {\n        console.log('Rect element:', this, 'ID:', d3.select(this).attr('id'));\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      d3.select(svgNode).selectAll('rect').on('click', function () {\n        const systemId = d3.select(this).attr('id');\n        console.log('Clicked on system:', systemId); // Debug: Check if click is captured\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        container.removeChild(svgNode);\n      }\n    };\n  }, [graph]);\n  const findShortestPath = (system1, system2) => {\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n    const path = find_path(graphNodes, system1, system2);\n    console.log(`Shortest path: ${path}`);\n    highlightPath(path);\n  };\n  const highlightPath = path => {\n    d3.selectAll('rect').attr('fill', '#cccccc'); // Reset all systems color\n    path.forEach(system => {\n      d3.select(`#${system}`).attr('fill', 'red'); // Highlight systems in the path\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};\n_s(UniverseMap, \"pMhpqdRt+Z/Olc/obs2aIRlRZ6I=\");\n_c = UniverseMap;\nexport default UniverseMap;\nvar _c;\n$RefreshReg$(_c, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useState","d3","find_path","jsxDEV","_jsxDEV","UniverseMap","_s","graph","setGraph","nodes","edges","selectedSystems","setSelectedSystems","fetch","then","response","json","data","svgNode","xml","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","select","selectAll","each","console","log","attr","on","systemId","prev","newSelection","length","findShortestPath","system1","system2","graphNodes","forEach","edge","start","end","distance","path","highlightPath","system","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\n\nconst UniverseMap = () => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n\n  useEffect(() => {\n    fetch('/graph_data.json')\n      .then(response => response.json())\n      .then(data => setGraph(data));\n  }, []);\n\n  useEffect(() => {\n    let svgNode;\n\n    d3.xml('/PrUn_universe_map.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      container.appendChild(svgNode);\n\n      // Debug: Print all rect elements and their IDs\n      d3.select(svgNode).selectAll('rect').each(function() {\n        console.log('Rect element:', this, 'ID:', d3.select(this).attr('id'));\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      d3.select(svgNode).selectAll('rect').on('click', function() {\n        const systemId = d3.select(this).attr('id');\n        console.log('Clicked on system:', systemId); // Debug: Check if click is captured\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        container.removeChild(svgNode);\n      }\n    };\n  }, [graph]);\n\n  const findShortestPath = (system1, system2) => {\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n\n    const path = find_path(graphNodes, system1, system2);\n    console.log(`Shortest path: ${path}`);\n    highlightPath(path);\n  };\n\n  const highlightPath = (path) => {\n    d3.selectAll('rect').attr('fill', '#cccccc'); // Reset all systems color\n    path.forEach(system => {\n      d3.select(`#${system}`).attr('fill', 'red'); // Highlight systems in the path\n    });\n  };\n\n  return <div id=\"map-container\"></div>;\n};\n\nexport default UniverseMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}