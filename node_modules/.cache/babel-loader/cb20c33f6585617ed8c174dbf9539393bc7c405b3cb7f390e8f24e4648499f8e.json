{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback, useContext } from 'react';\nimport { highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SelectionContext = /*#__PURE__*/createContext();\nexport const SelectionProvider = ({\n  children\n}) => {\n  _s();\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n  const {\n    findShortestPath\n  } = useContext(GraphContext);\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => {\n      if (prev) {\n        // If turning off pathfinding, reset the graph state\n        highlightSelectedSystemUtil(null, null, [], prev);\n      }\n      return !prev;\n    });\n    setPathfindingSelection([]); // Reset selection when toggling\n  }, []);\n  const highlightSelectedSystem = useCallback(nextSelectedSystem => {\n    if (isPathfindingEnabled) {\n      setPathfindingSelection(prev => {\n        let newSelection;\n        if (prev.length === 2) {\n          // Reset selection if it already has two entries\n          newSelection = [nextSelectedSystem];\n        } else {\n          // Add new selection, keeping at most 2 entries\n          newSelection = [...prev, nextSelectedSystem].slice(-2);\n        }\n\n        // Always update selectedSystem\n        setSelectedSystem(prevSelectedSystem => {\n          if (newSelection.length === 1) {\n            highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, newSelection, isPathfindingEnabled);\n          }\n          return nextSelectedSystem;\n        });\n        // If we now have 2 systems selected, find the shortest path\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n        }\n        return newSelection;\n      });\n    } else {\n      // Behavior when pathfinding is disabled\n      setSelectedSystem(prevSelectedSystem => {\n        highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, [], isPathfindingEnabled);\n        return nextSelectedSystem;\n      });\n    }\n  }, [isPathfindingEnabled, findShortestPath]);\n  return /*#__PURE__*/_jsxDEV(SelectionContext.Provider, {\n    value: {\n      isPathfindingEnabled,\n      togglePathfinding,\n      selectedSystem,\n      pathfindingSelection,\n      highlightSelectedSystem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectionProvider, \"OjNN1KvSOOdJg6PLLAq97fHdlbs=\");\n_c = SelectionProvider;\nvar _c;\n$RefreshReg$(_c, \"SelectionProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","useContext","highlightSelectedSystem","highlightSelectedSystemUtil","GraphContext","jsxDEV","_jsxDEV","SelectionContext","SelectionProvider","children","_s","isPathfindingEnabled","setIsPathfindingEnabled","selectedSystem","setSelectedSystem","pathfindingSelection","setPathfindingSelection","findShortestPath","togglePathfinding","prev","nextSelectedSystem","newSelection","length","slice","prevSelectedSystem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js"],"sourcesContent":["import React, { createContext, useState, useCallback, useContext } from 'react';\nimport { highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\nimport { GraphContext } from '../contexts/GraphContext';\n\nexport const SelectionContext = createContext();\n\nexport const SelectionProvider = ({ children }) => {\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n\n  const { findShortestPath } = useContext(GraphContext);\n\n  const togglePathfinding = useCallback(() => {\n  setIsPathfindingEnabled(prev => {\n    if (prev) {\n      // If turning off pathfinding, reset the graph state\n      highlightSelectedSystemUtil(null, null, [], prev);\n    }\n    return !prev;\n  });\n  setPathfindingSelection([]); // Reset selection when toggling\n}, []);\n\nconst highlightSelectedSystem = useCallback((nextSelectedSystem) => {\n  if (isPathfindingEnabled) {\n    setPathfindingSelection(prev => {\n      let newSelection;\n      if (prev.length === 2) {\n        // Reset selection if it already has two entries\n        newSelection = [nextSelectedSystem];\n      } else {\n        // Add new selection, keeping at most 2 entries\n        newSelection = [...prev, nextSelectedSystem].slice(-2);\n      }\n\n      // Always update selectedSystem\n      setSelectedSystem(prevSelectedSystem => {\n        if (newSelection.length === 1) {\n          highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, newSelection, isPathfindingEnabled);\n        }\n        return nextSelectedSystem;\n      });\n      // If we now have 2 systems selected, find the shortest path\n        if (newSelection.length === 2) {\n          findShortestPath(newSelection[0], newSelection[1]);\n        }\n      return newSelection;\n    });\n  } else {\n    // Behavior when pathfinding is disabled\n    setSelectedSystem(prevSelectedSystem => {\n      highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, [], isPathfindingEnabled);\n      return nextSelectedSystem;\n    });\n  }\n}, [isPathfindingEnabled, findShortestPath]);\n\n\n\n\n\n\n\n\n  return (\n    <SelectionContext.Provider\n      value={{\n        isPathfindingEnabled,\n        togglePathfinding,\n        selectedSystem,\n        pathfindingSelection,\n        highlightSelectedSystem\n      }}\n    >\n      {children}\n    </SelectionContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC/E,SAASC,uBAAuB,IAAIC,2BAA2B,QAAQ,qBAAqB;AAC5F,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,gBAAgB,gBAAGT,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMU,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEpE,MAAM;IAAEkB;EAAiB,CAAC,GAAGhB,UAAU,CAACG,YAAY,CAAC;EAErD,MAAMc,iBAAiB,GAAGlB,WAAW,CAAC,MAAM;IAC5CY,uBAAuB,CAACO,IAAI,IAAI;MAC9B,IAAIA,IAAI,EAAE;QACR;QACAhB,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAEgB,IAAI,CAAC;MACnD;MACA,OAAO,CAACA,IAAI;IACd,CAAC,CAAC;IACFH,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMd,uBAAuB,GAAGF,WAAW,CAAEoB,kBAAkB,IAAK;IAClE,IAAIT,oBAAoB,EAAE;MACxBK,uBAAuB,CAACG,IAAI,IAAI;QAC9B,IAAIE,YAAY;QAChB,IAAIF,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;UACrB;UACAD,YAAY,GAAG,CAACD,kBAAkB,CAAC;QACrC,CAAC,MAAM;UACL;UACAC,YAAY,GAAG,CAAC,GAAGF,IAAI,EAAEC,kBAAkB,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxD;;QAEA;QACAT,iBAAiB,CAACU,kBAAkB,IAAI;UACtC,IAAIH,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;YAC7BnB,2BAA2B,CAACqB,kBAAkB,EAAEJ,kBAAkB,EAAEC,YAAY,EAAEV,oBAAoB,CAAC;UACzG;UACA,OAAOS,kBAAkB;QAC3B,CAAC,CAAC;QACF;QACE,IAAIC,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;UAC7BL,gBAAgB,CAACI,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;QACpD;QACF,OAAOA,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAP,iBAAiB,CAACU,kBAAkB,IAAI;QACtCrB,2BAA2B,CAACqB,kBAAkB,EAAEJ,kBAAkB,EAAE,EAAE,EAAET,oBAAoB,CAAC;QAC7F,OAAOS,kBAAkB;MAC3B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACT,oBAAoB,EAAEM,gBAAgB,CAAC,CAAC;EAS1C,oBACEX,OAAA,CAACC,gBAAgB,CAACkB,QAAQ;IACxBC,KAAK,EAAE;MACLf,oBAAoB;MACpBO,iBAAiB;MACjBL,cAAc;MACdE,oBAAoB;MACpBb;IACF,CAAE;IAAAO,QAAA,EAEDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACpB,EAAA,CAxEWF,iBAAiB;AAAAuB,EAAA,GAAjBvB,iBAAiB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}