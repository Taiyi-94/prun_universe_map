{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = () => {\n  _s();\n  const {\n    graph,\n    findShortestPath,\n    setSelectedSystems,\n    setSelectedSystem,\n    isPathfindingEnabled\n  } = useContext(GraphContext);\n  useEffect(() => {\n    console.log('Graph in UniverseMap:', graph);\n    let svgNode;\n    let zoom;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      zoom = d3.zoom().scaleExtent([1, 20]) // Set the minimum and maximum zoom scales\n      .on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      addMouseEvents(g);\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function () {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          return;\n        }\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n        setSelectedSystem(systemId);\n      });\n    });\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        if (container.contains(svgNode)) {\n          container.removeChild(svgNode);\n        }\n      }\n    };\n  }, [graph, findShortestPath, setSelectedSystems, setSelectedSystem]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_s(UniverseMap, \"HJPVoks1VAWMEXWtDPCzpyIG+GI=\");\n_c = UniverseMap;\nexport default UniverseMap;\nvar _c;\n$RefreshReg$(_c, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useContext","d3","GraphContext","addMouseEvents","jsxDEV","_jsxDEV","UniverseMap","_s","graph","findShortestPath","setSelectedSystems","setSelectedSystem","isPathfindingEnabled","console","log","svgNode","zoom","xml","then","data","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","select","g","append","node","scaleExtent","on","event","attr","transform","call","selectAll","systemId","replace","prev","newSelection","length","contains","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\n\nconst UniverseMap = () => {\n  const { graph, findShortestPath, setSelectedSystems, setSelectedSystem, isPathfindingEnabled } = useContext(GraphContext);\n  \n  useEffect(() => {\n    console.log('Graph in UniverseMap:', graph);\n    let svgNode;\n    let zoom;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      zoom = d3.zoom()\n        .scaleExtent([1, 20]) // Set the minimum and maximum zoom scales\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      addMouseEvents(g);\n\n      // Add click event to systems (assuming they are rect elements)\n      g.selectAll('rect').on('click', function() {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          return;\n        }\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n        setSelectedSystem(systemId);\n      });\n    });\n\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        if (container.contains(svgNode)) {\n          container.removeChild(svgNode);\n        }\n      }\n    };\n  }, [graph, findShortestPath, setSelectedSystems, setSelectedSystem]);\n\n  return <div id=\"map-container\"></div>;\n};\n\nexport default UniverseMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}