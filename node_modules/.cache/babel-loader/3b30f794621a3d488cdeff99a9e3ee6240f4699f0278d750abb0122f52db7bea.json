{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { SearchContext } from '../contexts/SearchContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const {\n    graph\n  } = useContext(GraphContext);\n  const {\n    highlightSelectedSystem\n  } = useContext(SelectionContext);\n  const {\n    graphRef\n  } = useContext(SearchContext);\n  const svgRef = useRef(null);\n\n  // Handle system click\n  const handleSystemClick = useCallback(systemId => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    highlightSelectedSystem(systemId);\n  }, [highlightSelectedSystem]);\n\n  // Attach click events\n  const attachClickEvents = useCallback(g => {\n    g.selectAll('rect').on('click', function () {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n      const zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', event => {\n        g.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = {\n        svg,\n        g\n      };\n\n      // Attach click events here, after the SVG is fully initialized\n      attachClickEvents(g);\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n    // eslint-disable-next-line\n  }, [graph]);\n\n  // Update click events when handleSystemClick changes\n  useEffect(() => {\n    if (graphRef.current) {\n      attachClickEvents(graphRef.current.g);\n    }\n  }, [attachClickEvents]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}, \"FGWgG/0ZSGIhgLJTXMgfvLnMrBU=\")), \"FGWgG/0ZSGIhgLJTXMgfvLnMrBU=\");\n_c2 = UniverseMap;\nexport default UniverseMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"UniverseMap$React.memo\");\n$RefreshReg$(_c2, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useContext","useRef","useCallback","d3","GraphContext","SelectionContext","SearchContext","addMouseEvents","jsxDEV","_jsxDEV","UniverseMap","_s","memo","_c","graph","highlightSelectedSystem","graphRef","svgRef","handleSystemClick","systemId","attachClickEvents","g","selectAll","on","select","attr","replace","edges","xml","then","data","svgNode","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","svg","append","node","zoom","scaleExtent","event","transform","call","current","contains","id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useContext, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { GraphContext } from '../contexts/GraphContext';\nimport { SelectionContext } from '../contexts/SelectionContext';\nimport { SearchContext } from '../contexts/SearchContext';\nimport { addMouseEvents } from '../utils/svgUtils';\nimport './UniverseMap.css';\n\nconst UniverseMap = React.memo(() => {\n  const { graph } = useContext(GraphContext);\n  const { highlightSelectedSystem } = useContext(SelectionContext);\n  const { graphRef } = useContext(SearchContext);\n  const svgRef = useRef(null);\n\n  // Handle system click\n  const handleSystemClick = useCallback((systemId) => {\n    if (systemId === 'rect1') {\n      return;\n    }\n    highlightSelectedSystem(systemId);\n  }, [highlightSelectedSystem]);\n\n  // Attach click events\n  const attachClickEvents = useCallback((g) => {\n    g.selectAll('rect').on('click', function() {\n      const systemId = d3.select(this).attr('id').replace('#', '');\n      handleSystemClick(systemId);\n    });\n  }, [handleSystemClick]);\n\n  // Initialize D3 graph\n  useEffect(() => {\n    if (!graph || !graph.edges) return;\n\n    d3.xml('/PrUn_universe_map_normalized.svg').then(data => {\n      const svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Append the SVG node to the container\n      container.appendChild(svgNode);\n\n      // Select the SVG element and create a group element\n      const svg = d3.select(svgNode);\n      const g = svg.append('g');\n\n      // Move all children of the SVG to the group\n      while (svgNode.firstChild && svgNode.firstChild !== g.node()) {\n        g.node().appendChild(svgNode.firstChild);\n      }\n\n      const zoom = d3.zoom()\n        .scaleExtent([1, 20])\n        .on('zoom', (event) => {\n          g.attr('transform', event.transform);\n        });\n\n      svg.call(zoom);\n\n      addMouseEvents(g);\n\n      // Store references for later use\n      svgRef.current = svgNode;\n      graphRef.current = { svg, g };\n\n      // Attach click events here, after the SVG is fully initialized\n      attachClickEvents(g);\n    });\n\n    // Cleanup function\n    return () => {\n      if (svgRef.current) {\n        const container = document.getElementById('map-container');\n        if (container && container.contains(svgRef.current)) {\n          container.removeChild(svgRef.current);\n        }\n      }\n    };\n  // eslint-disable-next-line\n  }, [graph]);\n\n  // Update click events when handleSystemClick changes\n  useEffect(() => {\n    if (graphRef.current) {\n      attachClickEvents(graphRef.current.g);\n    }\n  }, [attachClickEvents]);\n\n  return <div id=\"map-container\"></div>;\n});\n\nexport default UniverseMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}