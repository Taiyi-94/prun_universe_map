{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath, highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GraphContext = /*#__PURE__*/createContext();\nexport const GraphProvider = ({\n  children\n}) => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [materials, setMaterials] = useState({});\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planetData, setPlanetData] = useState({});\n  const [universeData, setUniverseData] = useState({});\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n\n  // ... (keep the existing useEffect and other functions)\n\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => !prev);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GraphContext.Provider, {\n    value: {\n      graph,\n      setGraph,\n      materials,\n      setMaterials,\n      selectedSystems,\n      setSelectedSystems,\n      findShortestPath,\n      selectedSystem,\n      setSelectedSystem,\n      planetData,\n      universeData,\n      isPathfindingEnabled,\n      togglePathfinding,\n      highlightSelectedSystem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphProvider, \"iMD5sd/O011uPZFcyd1u3Uh9HKY=\");\n_c = GraphProvider;\nvar _c;\n$RefreshReg$(_c, \"GraphProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","findShortestPath","findShortestPathUtil","highlightPath","highlightSelectedSystem","highlightSelectedSystemUtil","jsxDEV","_jsxDEV","GraphContext","GraphProvider","children","_s","graph","setGraph","nodes","edges","materials","setMaterials","selectedSystems","setSelectedSystems","selectedSystem","setSelectedSystem","planetData","setPlanetData","universeData","setUniverseData","isPathfindingEnabled","setIsPathfindingEnabled","togglePathfinding","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath, highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\n\nexport const GraphContext = createContext();\n\nexport const GraphProvider = ({ children }) => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [materials, setMaterials] = useState({});\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planetData, setPlanetData] = useState({});\n  const [universeData, setUniverseData] = useState({});\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n\n  // ... (keep the existing useEffect and other functions)\n\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => !prev);\n  }, []);\n\n  return (\n    <GraphContext.Provider value={{\n      graph,\n      setGraph,\n      materials,\n      setMaterials,\n      selectedSystems,\n      setSelectedSystems,\n      findShortestPath,\n      selectedSystem,\n      setSelectedSystem,\n      planetData,\n      universeData,\n      isPathfindingEnabled,\n      togglePathfinding,\n      highlightSelectedSystem,\n    }}>\n      {children}\n    </GraphContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9E,SAASC,gBAAgB,IAAIC,oBAAoB,EAAEC,aAAa,EAAEC,uBAAuB,IAAIC,2BAA2B,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtJ,OAAO,MAAMC,YAAY,gBAAGX,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMY,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,KAAK,EAAE,CAAC,CAAC;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EAC5D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC4B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;;EAEvE;;EAEA,MAAM8B,iBAAiB,GAAG5B,WAAW,CAAC,MAAM;IAC1C2B,uBAAuB,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAC5BnB,KAAK;MACLC,QAAQ;MACRG,SAAS;MACTC,YAAY;MACZC,eAAe;MACfC,kBAAkB;MAClBlB,gBAAgB;MAChBmB,cAAc;MACdC,iBAAiB;MACjBC,UAAU;MACVE,YAAY;MACZE,oBAAoB;MACpBE,iBAAiB;MACjBxB;IACF,CAAE;IAAAM,QAAA,EACCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACxB,EAAA,CAnCWF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}