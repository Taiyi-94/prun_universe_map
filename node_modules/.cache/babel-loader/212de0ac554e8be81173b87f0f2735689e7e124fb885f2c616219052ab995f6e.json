{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback } from 'react';\nimport { highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SelectionContext = /*#__PURE__*/createContext();\nexport const SelectionProvider = ({\n  children\n}) => {\n  _s();\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n  const togglePathfinding = useCallback(() => {\n    setIsPathfindingEnabled(prev => {\n      if (prev) {\n        // If turning off pathfinding, reset the graph state\n        highlightSelectedSystemUtil(null, null, []);\n      }\n      return !prev;\n    });\n    setPathfindingSelection([]); // Reset selection when toggling\n  }, [highlightSelectedSystemUtil]);\n  const highlightSelectedSystem = useCallback(nextSelectedSystem => {\n    if (isPathfindingEnabled) {\n      setPathfindingSelection(prev => {\n        const newSelection = [...prev, nextSelectedSystem].slice(-2);\n        return newSelection;\n      });\n    } else {\n      setSelectedSystem(prevSelectedSystem => {\n        highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, []);\n        return nextSelectedSystem;\n      });\n    }\n  }, [isPathfindingEnabled]);\n  return /*#__PURE__*/_jsxDEV(SelectionContext.Provider, {\n    value: {\n      isPathfindingEnabled,\n      togglePathfinding,\n      selectedSystem,\n      pathfindingSelection,\n      highlightSelectedSystem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectionProvider, \"UDLOfodrbUTJzFoZumJLVQp56No=\");\n_c = SelectionProvider;\nvar _c;\n$RefreshReg$(_c, \"SelectionProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","highlightSelectedSystem","highlightSelectedSystemUtil","jsxDEV","_jsxDEV","SelectionContext","SelectionProvider","children","_s","isPathfindingEnabled","setIsPathfindingEnabled","selectedSystem","setSelectedSystem","pathfindingSelection","setPathfindingSelection","togglePathfinding","prev","nextSelectedSystem","newSelection","slice","prevSelectedSystem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/SelectionContext.js"],"sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\nimport { highlightSelectedSystem as highlightSelectedSystemUtil } from '../utils/graphUtils';\n\nexport const SelectionContext = createContext();\n\nexport const SelectionProvider = ({ children }) => {\n  const [isPathfindingEnabled, setIsPathfindingEnabled] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [pathfindingSelection, setPathfindingSelection] = useState([]);\n\n  const togglePathfinding = useCallback(() => {\n  setIsPathfindingEnabled(prev => {\n    if (prev) {\n      // If turning off pathfinding, reset the graph state\n      highlightSelectedSystemUtil(null, null, []);\n    }\n    return !prev;\n  });\n  setPathfindingSelection([]); // Reset selection when toggling\n}, [highlightSelectedSystemUtil]);\n\n  const highlightSelectedSystem = useCallback((nextSelectedSystem) => {\n    if (isPathfindingEnabled) {\n      setPathfindingSelection(prev => {\n        const newSelection = [...prev, nextSelectedSystem].slice(-2);\n        return newSelection;\n      });\n    } else {\n      setSelectedSystem(prevSelectedSystem => {\n        highlightSelectedSystemUtil(prevSelectedSystem, nextSelectedSystem, []);\n        return nextSelectedSystem;\n      });\n    }\n  }, [isPathfindingEnabled]);\n\n  return (\n    <SelectionContext.Provider\n      value={{\n        isPathfindingEnabled,\n        togglePathfinding,\n        selectedSystem,\n        pathfindingSelection,\n        highlightSelectedSystem\n      }}\n    >\n      {children}\n    </SelectionContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACnE,SAASC,uBAAuB,IAAIC,2BAA2B,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7F,OAAO,MAAMC,gBAAgB,gBAAGP,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMQ,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpE,MAAMgB,iBAAiB,GAAGf,WAAW,CAAC,MAAM;IAC5CU,uBAAuB,CAACM,IAAI,IAAI;MAC9B,IAAIA,IAAI,EAAE;QACR;QACAd,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;MAC7C;MACA,OAAO,CAACc,IAAI;IACd,CAAC,CAAC;IACFF,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACZ,2BAA2B,CAAC,CAAC;EAE/B,MAAMD,uBAAuB,GAAGD,WAAW,CAAEiB,kBAAkB,IAAK;IAClE,IAAIR,oBAAoB,EAAE;MACxBK,uBAAuB,CAACE,IAAI,IAAI;QAC9B,MAAME,YAAY,GAAG,CAAC,GAAGF,IAAI,EAAEC,kBAAkB,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5D,OAAOD,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLN,iBAAiB,CAACQ,kBAAkB,IAAI;QACtClB,2BAA2B,CAACkB,kBAAkB,EAAEH,kBAAkB,EAAE,EAAE,CAAC;QACvE,OAAOA,kBAAkB;MAC3B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACR,oBAAoB,CAAC,CAAC;EAE1B,oBACEL,OAAA,CAACC,gBAAgB,CAACgB,QAAQ;IACxBC,KAAK,EAAE;MACLb,oBAAoB;MACpBM,iBAAiB;MACjBJ,cAAc;MACdE,oBAAoB;MACpBZ;IACF,CAAE;IAAAM,QAAA,EAEDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAClB,EAAA,CA3CWF,iBAAiB;AAAAqB,EAAA,GAAjBrB,iBAAiB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}