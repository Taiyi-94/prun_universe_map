{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath } from '../utils/graphUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GraphContext = /*#__PURE__*/createContext();\nexport const GraphProvider = ({\n  children\n}) => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planets, setPlanets] = useState([]);\n  useEffect(() => {\n    console.log('Fetching graph data');\n    fetch('/graph_data.json').then(response => response.json()).then(data => {\n      setGraph(data);\n    }).catch(error => {\n      console.error('Error fetching graph data:', error);\n    });\n  }, []);\n  const findShortestPath = useCallback((system1, system2) => {\n    findShortestPathUtil(graph, system1, system2, highlightPath);\n  }, [graph]);\n  return /*#__PURE__*/_jsxDEV(GraphContext.Provider, {\n    value: {\n      graph,\n      setGraph,\n      selectedSystems,\n      setSelectedSystems,\n      findShortestPath,\n      selectedSystem,\n      setSelectedSystem,\n      planets,\n      setPlanets\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphProvider, \"XPhpiE6JFPIrTbZ5UUyzqY8+Hyw=\");\n_c = GraphProvider;\nvar _c;\n$RefreshReg$(_c, \"GraphProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","findShortestPath","findShortestPathUtil","highlightPath","jsxDEV","_jsxDEV","GraphContext","GraphProvider","children","_s","graph","setGraph","nodes","edges","selectedSystems","setSelectedSystems","selectedSystem","setSelectedSystem","planets","setPlanets","console","log","fetch","then","response","json","data","catch","error","system1","system2","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/contexts/GraphContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { findShortestPath as findShortestPathUtil, highlightPath } from '../utils/graphUtils';\n\nexport const GraphContext = createContext();\n\nexport const GraphProvider = ({ children }) => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [selectedSystem, setSelectedSystem] = useState(null);\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    console.log('Fetching graph data');\n    fetch('/graph_data.json')\n      .then(response => response.json())\n      .then(data => {\n        setGraph(data);\n      })\n      .catch(error => {\n        console.error('Error fetching graph data:', error);\n      });\n  }, []);\n\n  const findShortestPath = useCallback((system1, system2) => {\n    findShortestPathUtil(graph, system1, system2, highlightPath);\n  }, [graph]);\n\n  return (\n    <GraphContext.Provider value={{\n      graph,\n      setGraph,\n      selectedSystems,\n      setSelectedSystems,\n      findShortestPath,\n      selectedSystem,\n      setSelectedSystem,\n      planets,\n      setPlanets\n    }}>\n      {children}\n    </GraphContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9E,SAASC,gBAAgB,IAAIC,oBAAoB,EAAEC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9F,OAAO,MAAMC,YAAY,gBAAGT,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMU,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC;IAAEc,KAAK,EAAE,CAAC,CAAC;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EAC5D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACdqB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCC,KAAK,CAAC,kBAAkB,CAAC,CACtBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZf,QAAQ,CAACe,IAAI,CAAC;IAChB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM3B,gBAAgB,GAAGD,WAAW,CAAC,CAAC6B,OAAO,EAAEC,OAAO,KAAK;IACzD5B,oBAAoB,CAACQ,KAAK,EAAEmB,OAAO,EAAEC,OAAO,EAAE3B,aAAa,CAAC;EAC9D,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EAEX,oBACEL,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAC5BtB,KAAK;MACLC,QAAQ;MACRG,eAAe;MACfC,kBAAkB;MAClBd,gBAAgB;MAChBe,cAAc;MACdC,iBAAiB;MACjBC,OAAO;MACPC;IACF,CAAE;IAAAX,QAAA,EACCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC3B,EAAA,CArCWF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}