{"ast":null,"code":"var _jsxFileName = \"/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UniverseMap = () => {\n  _s();\n  const [graph, setGraph] = useState({\n    nodes: {},\n    edges: []\n  });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  useEffect(() => {\n    fetch('/graph_data.json').then(response => response.json()).then(data => setGraph(data));\n  }, []);\n  const findShortestPath = useCallback((system1, system2) => {\n    if (system1 === 'rect1' || system2 === 'rect1') {\n      console.error('Invalid system selection for pathfinding:', system1, system2);\n      return;\n    }\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n    try {\n      const path = find_path(graphNodes, system1, system2);\n      console.log(`Shortest path: ${path}`);\n      highlightPath(path);\n    } catch (error) {\n      console.error('Error finding path:', error);\n    }\n  }, [graph]);\n  const highlightPath = path => {\n    // Reset all system nodes color and stroke except the background rect\n    d3.selectAll('rect').each(function () {\n      if (d3.select(this).attr('id') !== 'rect1') {\n        d3.select(this).attr('fill', '#cccccc').attr('stroke', '#000000');\n      }\n    });\n\n    // Highlight systems in the path\n    path.forEach(system => {\n      const element = d3.select(`#${CSS.escape(system)}`);\n      console.log('Highlighting system:', system, 'Element:', element); // Debug: Log element being highlighted\n      element.attr('fill', '#ff0000').attr('stroke', '#ffff00'); // Using red and yellow in hex format\n    });\n  };\n  useEffect(() => {\n    let svgNode;\n    d3.xml('/PrUn_universe_map.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n      container.appendChild(svgNode);\n\n      // Debug: Print all rect elements and their IDs\n      d3.select(svgNode).selectAll('rect').each(function () {\n        console.log('Rect element:', this, 'ID:', d3.select(this).attr('id'));\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      d3.select(svgNode).selectAll('rect').on('click', function () {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          console.log('Background clicked, ignoring...');\n          return;\n        }\n        console.log('Clicked on system:', systemId); // Debug: Check if click is captured\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        container.removeChild(svgNode);\n      }\n    };\n  }, [graph, findShortestPath]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_s(UniverseMap, \"NuTmWa0cBqqPekiNVGLU0FLVz7M=\");\n_c = UniverseMap;\nexport default UniverseMap;\nvar _c;\n$RefreshReg$(_c, \"UniverseMap\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","d3","find_path","jsxDEV","_jsxDEV","UniverseMap","_s","graph","setGraph","nodes","edges","selectedSystems","setSelectedSystems","fetch","then","response","json","data","findShortestPath","system1","system2","console","error","graphNodes","forEach","edge","start","end","distance","path","log","highlightPath","selectAll","each","select","attr","system","element","CSS","escape","svgNode","xml","documentElement","container","document","getElementById","firstChild","removeChild","appendChild","on","systemId","replace","prev","newSelection","length","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/admin_user/PycharmProjects/StarMap_PrUn/prun-universe-map/src/components/UniverseMap.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { find_path } from 'dijkstrajs';\n\nconst UniverseMap = () => {\n  const [graph, setGraph] = useState({ nodes: {}, edges: [] });\n  const [selectedSystems, setSelectedSystems] = useState([]);\n\n  useEffect(() => {\n    fetch('/graph_data.json')\n      .then(response => response.json())\n      .then(data => setGraph(data));\n  }, []);\n\n  const findShortestPath = useCallback((system1, system2) => {\n    if (system1 === 'rect1' || system2 === 'rect1') {\n      console.error('Invalid system selection for pathfinding:', system1, system2);\n      return;\n    }\n\n    const graphNodes = {};\n    graph.edges.forEach(edge => {\n      if (!graphNodes[edge.start]) graphNodes[edge.start] = {};\n      if (!graphNodes[edge.end]) graphNodes[edge.end] = {};\n      graphNodes[edge.start][edge.end] = edge.distance;\n      graphNodes[edge.end][edge.start] = edge.distance;\n    });\n\n    try {\n      const path = find_path(graphNodes, system1, system2);\n      console.log(`Shortest path: ${path}`);\n      highlightPath(path);\n    } catch (error) {\n      console.error('Error finding path:', error);\n    }\n  }, [graph]);\n\n  const highlightPath = (path) => {\n    // Reset all system nodes color and stroke except the background rect\n    d3.selectAll('rect').each(function() {\n      if (d3.select(this).attr('id') !== 'rect1') {\n        d3.select(this).attr('fill', '#cccccc').attr('stroke', '#000000');\n      }\n    });\n\n    // Highlight systems in the path\n    path.forEach(system => {\n      const element = d3.select(`#${CSS.escape(system)}`);\n      console.log('Highlighting system:', system, 'Element:', element); // Debug: Log element being highlighted\n      element.attr('fill', '#ff0000').attr('stroke', '#ffff00'); // Using red and yellow in hex format\n    });\n  };\n\n  useEffect(() => {\n    let svgNode;\n\n    d3.xml('/PrUn_universe_map.svg').then(data => {\n      svgNode = data.documentElement;\n      const container = document.getElementById('map-container');\n\n      // Clear any existing SVG to prevent duplicates\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      container.appendChild(svgNode);\n\n      // Debug: Print all rect elements and their IDs\n      d3.select(svgNode).selectAll('rect').each(function() {\n        console.log('Rect element:', this, 'ID:', d3.select(this).attr('id'));\n      });\n\n      // Add click event to systems (assuming they are rect elements)\n      d3.select(svgNode).selectAll('rect').on('click', function() {\n        const systemId = d3.select(this).attr('id').replace('#', '');\n        if (systemId === 'rect1') {\n          console.log('Background clicked, ignoring...');\n          return;\n        }\n        console.log('Clicked on system:', systemId); // Debug: Check if click is captured\n        setSelectedSystems(prev => {\n          const newSelection = [...prev, systemId];\n          if (newSelection.length === 2) {\n            findShortestPath(newSelection[0], newSelection[1]);\n            return [];\n          }\n          return newSelection;\n        });\n      });\n    });\n\n    return () => {\n      if (svgNode) {\n        const container = document.getElementById('map-container');\n        container.removeChild(svgNode);\n      }\n    };\n  }, [graph, findShortestPath]);\n\n  return <div id=\"map-container\"></div>;\n};\n\nexport default UniverseMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}